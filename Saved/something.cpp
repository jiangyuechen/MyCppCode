#define 整型 int
#define 布尔 bool
#define 无符号 unsigned
#define 有符号 signed
#define 字符 char
#define 指针 *
#define 引用 &
#define 超长整型 long long
#define 浮点 float
#define 双精度 double
#define 空 void
#define 主程序 main
#define 返回 return
#define （ (
#define ）)
#define ； ;
#define 如果 if
#define 否则 else
#define 检验 switch
#define 结果为 case
#define 都不是 default
#define 当 while
#define 类 class
#define 结构体 struct
#define 公有 public
#define 私有 private
#define 保护 protected
#define 虚 virtual
#define 命名空间 namespace
#define ： :
#define （） ()
#define 构造函数
#define 析构函数 ~
#define 的 .
#define ， ,
#define 输出 printf
#define 输入 scanf
#define 使用 using
#define 标准空间 std
#define 系统 system
#define 暂停 "pause"
#define 常量 const
#define 常量表达式 constexpr
#define 地址 &
#define 解引用 *
#define 或 ||
#define 与 &&
#define 取反 ~
#define 否 !
#define 不成立 !
#define 位或 &
#define 位与 |
#define 位异或 ^
#define 左移 <<
#define 右移 >>
#define 大于 >
#define 小于 <
#define 大于等于 >=
#define 小于等于 <=
#define 等于 ==
#include <bits/stdc++.h>

使用 命名空间 标准空间 ；

    常量表达式 整型 最大值 = 1000000 ；
        类 我的类
{
    私有 ：
        整型 爱克斯 ；
            整型 外 ；
                公有 ：
                    构造函数 我的类 （） {}
    ；
        构造函数 我的类 （ 整型 诶 ， 整型 比 ）{
            爱克斯 = 诶 ；
                外 = 比 ；} 析构函数 我的类 （） {}
    ；
        整型 相加 （ ）
    {
        返回 爱克斯 + 外 ；
    }
}
；

    常量 字符 指针 字符串 ；

        整型 主程序 （）
{
    我的类 我 = 我的类 （ 1 ， 2 ） ；
        我的类 引用 我的引用 = 我 ；
            我的类 指针 我的指针 = 地址 我 ；
                输出 （ "%d" ， 我 的 相加 （） ） ；
                    系统 （ 暂停 ） ；
                        返回 0 ；
}